http://web.archive.org/web/20150317011143/http://opencv-code.com/tutorials/automatic-perspective-correction-for-quadrilateral-objects/

    Get the edge map. --> canny / thresholding

    Detect lines with Hough transform. --> probabilistic hough transform / hough transform normal

        cv::HoughLinesP(bw, lines, 1, CV_PI/180, 70, 30, 10);

        Notice that the line segments only occupy less than the corresponding edges. 
        In order to get the quadrilateral object, we need to obtain the corner points 
        i.e. the intersections of the line segments. Expand the line segments to fit 
        the image ONLY FOR VISUALIZATION PURPOSES, expanding the lines is not needed 
        for finding the intersections of the line segments.

    Get the corners by finding intersections between lines. --> (wikipedia -> 
    http://web.archive.org/web/20170918022532/https://en.wikipedia.org/wiki/Line_intersection)

        cv::Point2f computeIntersect(cv::Vec4i a, cv::Vec4i b)
        {
            int x1 = a[0], y1 = a[1], x2 = a[2], y2 = a[3];
            int x3 = b[0], y3 = b[1], x4 = b[2], y4 = b[3];

            if (float d = ((float)(x1-x2) * (y3-y4)) - ((y1-y2) * (x3-x4)))
            {
                cv::Point2f pt;
                pt.x = ((x1*y2 - y1*x2) * (x3-x4) - (x1-x2) * (x3*y4 - y3*x4)) / d;
                pt.y = ((x1*y2 - y1*x2) * (y3-y4) - (y1-y2) * (x3*y4 - y3*x4)) / d;
                return pt;
            }
            else
                return cv::Point2f(-1, -1);
        }

        ...

        std::vector<cv::Point2f> corners;
        for (int i = 0; i < lines.size(); i++)
        {
            for (int j = i+1; j < lines.size(); j++)
            {
                cv::Point2f pt = computeIntersect(lines[i], lines[j]);
                if (pt.x >= 0 && pt.y >= 0)
                    corners.push_back(pt);
            }
        }

    Check if the approximate polygonal curve has 4 vertices.

        There is a chance that the object being observed is not a quadrilateral. 
        We check this by approximate a polygonal curve for the corner points. For 
        a quadrilateral, the approximation curve will have 4 vertices.

        std::vector<cv::Point2f> approx;
        cv::approxPolyDP(cv::Mat(corners), approx, 
                        cv::arcLength(cv::Mat(corners), true) * 0.02, true);

        if (approx.size() != 4)
        {
            std::cout << "The object is not quadrilateral!" << std::endl;
            return -1;
        }

    Determine top-left, bottom-left, top-right, and bottom-right corner.

        Given the four corner points, we have to determine the top-left, bottom-left, 
        top-right, and bottom-right corner so we can apply the perspective correction 
        and get a regular rectangle. For this:

            - Get the mass center.
            - Points that have lower y-axis than mass center are the top points, 
              otherwise they are bottom points.
            - Given two top points, the one with lower x-axis is the top-left. The other 
              is the top-right.
            - Given two bottom points, the one with lower x-axis is the bottom-left. The 
              other is the bottom-right.

        void sortCorners(std::vector<cv::Point2f>& corners, cv::Point2f center)
        {
            std::vector<cv::Point2f> top, bot;

            for (int i = 0; i < corners.size(); i++)
            {
                if (corners[i].y < center.y)
                    top.push_back(corners[i]);
                else
                    bot.push_back(corners[i]);
            }

            cv::Point2f tl = top[0].x > top[1].x ? top[1] : top[0];
            cv::Point2f tr = top[0].x > top[1].x ? top[0] : top[1];
            cv::Point2f bl = bot[0].x > bot[1].x ? bot[1] : bot[0];
            cv::Point2f br = bot[0].x > bot[1].x ? bot[0] : bot[1];

            corners.clear();
            corners.push_back(tl);
            corners.push_back(tr);
            corners.push_back(br);
            corners.push_back(bl);
        }

        ...

        // Get mass center
        cv::Point2f center(0,0);
        for (int i = 0; i < corners.size(); i++)
            center += corners[i];

        center *= (1. / corners.size());
        sortCorners(corners, center);


    Apply the perspective transformation.

        Opencv has the warpPerspective function. Takes (in Cpp) three arguments: src 
        image, dst image and transformation matrix as specified in by the corner points 
        of original contour/image and the corner points of destination contour/image. 
        Could also use bounding rectangle to transform to.

        // Define the destination image
        cv::Mat quad = cv::Mat::zeros(300, 220, CV_8UC3);

        // Corners of the destination image
        std::vector<cv::Point2f> quad_pts;
        quad_pts.push_back(cv::Point2f(0, 0));
        quad_pts.push_back(cv::Point2f(quad.cols, 0));
        quad_pts.push_back(cv::Point2f(quad.cols, quad.rows));
        quad_pts.push_back(cv::Point2f(0, quad.rows));

        // Get transformation matrix
        cv::Mat transmtx = cv::getPerspectiveTransform(corners, quad_pts);

        // Apply perspective transformation
        cv::warpPerspective(src, quad, transmtx, quad.size());
        cv::imshow("quadrilateral", quad);

    ????????????????????????????????????????????????????????????????????????????????????????
    Sharpen the image with negative kernel??????????????????????????????????????????????????
    ????????????????????????????????????????????????????????????????????????????????????????

